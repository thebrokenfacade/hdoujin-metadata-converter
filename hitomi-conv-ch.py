# This script should convert an info.txt file from hitomi-downloader to an info.json
# As an added bonus, it should handle english and chinese info.txt files
# This will ONLY work correctly with an info.txt file generated by hitomi-downloader

import os

try:
    # Read in info.txt to a string delineated by commas, using utf8 for non english characters
    with open("info.txt", "rt", encoding='utf8') as in_file:
        infotxt = in_file.read()
except FileNotFoundError:
    print("\nAn info.txt file was not found in the directory.")
    print("    There is nothing to do!")
    input("\nPress enter to exit...")
    exit()

# Convert the infotxt string to a list with each item determined by the commas
infolist = infotxt.split("\n")

# At this point we determine if the file is in english or chinese
if infolist[0].startswith("Gallery"):
    # Create string variables for each category in the info.txt v2 format
    # For some reason some categories use "" while others use [] to denote an empty category
    # the if statement is only needed for empty categories that use []
    # the rest of the empty categories use "" and thus do not need modified
    tit = "\"%s\"" % (infolist[2].replace('Title: ', ''))
    if tit == "N/A":
        tit = "\"\""
    ori = "\"\""
    aut = "[]"
    art = "\"%s\"" % (infolist[4].replace('Artists: ', ''))
    if art == "N/A":
        art = "[]"
    cir = "\"%s\"" % (infolist[6].replace('Groups: ', ''))
    if cir == "N/A":
        cir = "[]"
    sca = "[]"
    tra = "[]"
    pub = "\"\""
    des = "\"\""
    sta = "\"\""
    cha = "\"\""
    pag = ""
    tag = "\"%s\"" % (infolist[14].replace('Tags: ', ''))
    tag = tag.replace('female:', '')
    tag = tag.replace('male:', '')
    if tag == "N/A":
        tag = "[]"
    typ = "\"%s\"" % (infolist[8].replace('Types: ', ''))
    if typ == "N/A":
        typ = "\"\""
    lan = "\"%s\"" % (infolist[16].replace('Language: ', ''))
    if lan == "N/A":
        lan = "[]"
    rel = "\"\""
    rea = "\"\""
    chara = "\"%s\"" % (infolist[12].replace('Characters: ', ''))
    if chara == "N/A":
        chara = "[]"
    ser = "\"\""
    par = "\"%s\"" % (infolist[10].replace('Series: ', ''))
    url = "\"\""
    
    # Open a new json file to write into and create the json line by line because I can not figure out a better way to do it
    with open("info.json", "w", encoding = 'utf8') as out_file:
        out_file.write("{\n")
        out_file.write("  \"manga_info\": {\n")
        out_file.write("    \"title\": %s,\n" % tit)
        out_file.write("    \"original_title\": %s,\n" % ori)

        # If the category is empty just use [] on a single line
        # If the category has one or more items it needs to be in the format:
        #    "category": [
        #      "item1",
        #      "item2",
        #      "item3"
        #    ],
        if aut == "[]":
            out_file.write("    \"author\": %s,\n" % aut)
        else:
            out_file.write("    \"author\": [\n      %s\n    ],\n" % aut.replace(", ", "\",\n      \""))

        if art == "[]":
            out_file.write("    \"artist\": %s,\n" % art)
        else:
            out_file.write("    \"artist\": [\n      %s\n    ],\n" % art.replace(", ", "\",\n      \""))

        if cir == "[]":
            out_file.write("    \"circle\": %s,\n" % cir)
        else:
            out_file.write("    \"circle\": [\n      %s\n    ],\n" % cir.replace(", ", "\",\n      \""))

        if sca == "[]":
            out_file.write("    \"scanlator\": %s,\n" % sca)
        else:
            out_file.write("    \"scanlator\": [\n      %s\n    ],\n" % sca.replace(", ", "\",\n      \""))

        if tra == "[]":
            out_file.write("    \"translator\": %s,\n" % tra)
        else:
            out_file.write("    \"translator\": [\n      %s\n    ],\n" % tra.replace(", ", "\",\n      \""))

        out_file.write("    \"publisher\": %s,\n" % pub)
        out_file.write("    \"description\": %s,\n" % des)
        out_file.write("    \"status\": %s,\n" % sta)
        out_file.write("    \"chapters\": %s,\n" % cha)
        # Note no "" or [] for pages
        out_file.write("    \"pages\": %s,\n" % pag)

        if tag == "[]":
            out_file.write("    \"tags\": %s,\n" % tag)
        else:
            out_file.write("    \"tags\": [\n      %s\n    ],\n" % tag.replace(", ", "\",\n      \""))

        out_file.write("    \"type\": %s,\n" % typ)

        if lan == "[]":
            out_file.write("    \"language\": %s,\n" % lan)
        else:
            out_file.write("    \"language\": [\n      %s\n    ],\n" % lan.replace(", ", "\",\n      \""))

        out_file.write("    \"released\": %s,\n" % rel)
        out_file.write("    \"reading_direction\": %s,\n" % rea)

        if chara == "[]":
            out_file.write("    \"characters\": %s,\n" % chara)
        else:
            out_file.write("    \"characters\": [\n      %s\n    ],\n" % chara.replace(", ", "\",\n      \""))

        out_file.write("    \"series\": %s,\n" % ser)

        if par == "[]":
            out_file.write("    \"parody\": %s,\n" % par)
        else:
            out_file.write("    \"parody\": [\n      %s\n    ],\n" % par.replace(", ", "\",\n      \""))

        out_file.write("    \"url\": %s\n" % url)
        out_file.write("  }\n")
        out_file.write("}\n")

    root = os.getcwd()
    gal_path = os.path.join(root)

    print("\nA info.txt file was found in \"%s\"." % gal_path)
    print("    The info.txt was successfully converted.")
    print("    The info.json was saved to \"%s\"." % gal_path)
    print("    The info.txt was not deleted.")
    input("\nPress enter to exit...")
    exit()

elif infolist[0].startswith("图库"):
    # Create string variables for each category in the info.txt v2 format
    # For some reason some categories use "" while others use [] to denote an empty category
    # the if statement is only needed for empty categories that use []
    # the rest of the empty categories use "" and thus do not need modified
    tit = "\"%s\"" % (infolist[2].replace('标题: ', ''))
    if tit == "N/A":
        tit = "\"\""
    ori = "\"\""
    aut = "[]"
    art = "\"%s\"" % (infolist[4].replace('艺术家: ', ''))
    if art == "N/A":
        art = "[]"
    cir = "\"%s\"" % (infolist[6].replace('分组: ', ''))
    if cir == "N/A":
        cir = "[]"
    sca = "[]"
    tra = "[]"
    pub = "\"\""
    des = "\"\""
    sta = "\"\""
    cha = "\"\""
    pag = ""
    tag = "\"%s\"" % (infolist[14].replace('标签: ', ''))
    tag = tag.replace('female:', '')
    tag = tag.replace('male:', '')
    if tag == "N/A":
        tag = "[]"
    typ = "\"%s\"" % (infolist[8].replace('类型: ', ''))
    if typ == "N/A":
        typ = "\"\""
    lan = "\"%s\"" % (infolist[16].replace('语言: ', ''))
    if lan == "N/A":
        lan = "[]"
    rel = "\"\""
    rea = "\"\""
    chara = "\"%s\"" % (infolist[12].replace('人物: ', ''))
    if chara == "N/A":
        chara = "[]"
    ser = "\"\""
    par = "\"%s\"" % (infolist[10].replace('系列: ', ''))
    url = "\"\""
    
    # Open a new json file to write into and create the json line by line because I can not figure out a better way to do it
    with open("info.json", "w", encoding = 'utf8') as out_file:
        out_file.write("{\n")
        out_file.write("  \"manga_info\": {\n")
        out_file.write("    \"title\": %s,\n" % tit)
        out_file.write("    \"original_title\": %s,\n" % ori)

        # If the category is empty just use [] on a single line
        # If the category has one or more items it needs to be in the format:
        #    "category": [
        #      "item1",
        #      "item2",
        #      "item3"
        #    ],
        if aut == "[]":
            out_file.write("    \"author\": %s,\n" % aut)
        else:
            out_file.write("    \"author\": [\n      %s\n    ],\n" % aut.replace(", ", "\",\n      \""))

        if art == "[]":
            out_file.write("    \"artist\": %s,\n" % art)
        else:
            out_file.write("    \"artist\": [\n      %s\n    ],\n" % art.replace(", ", "\",\n      \""))

        if cir == "[]":
            out_file.write("    \"circle\": %s,\n" % cir)
        else:
            out_file.write("    \"circle\": [\n      %s\n    ],\n" % cir.replace(", ", "\",\n      \""))

        if sca == "[]":
            out_file.write("    \"scanlator\": %s,\n" % sca)
        else:
            out_file.write("    \"scanlator\": [\n      %s\n    ],\n" % sca.replace(", ", "\",\n      \""))

        if tra == "[]":
            out_file.write("    \"translator\": %s,\n" % tra)
        else:
            out_file.write("    \"translator\": [\n      %s\n    ],\n" % tra.replace(", ", "\",\n      \""))

        out_file.write("    \"publisher\": %s,\n" % pub)
        out_file.write("    \"description\": %s,\n" % des)
        out_file.write("    \"status\": %s,\n" % sta)
        out_file.write("    \"chapters\": %s,\n" % cha)
        # Note no "" or [] for pages
        out_file.write("    \"pages\": %s,\n" % pag)

        if tag == "[]":
            out_file.write("    \"tags\": %s,\n" % tag)
        else:
            out_file.write("    \"tags\": [\n      %s\n    ],\n" % tag.replace(", ", "\",\n      \""))

        out_file.write("    \"type\": %s,\n" % typ)

        if lan == "[]":
            out_file.write("    \"language\": %s,\n" % lan)
        else:
            out_file.write("    \"language\": [\n      %s\n    ],\n" % lan.replace(", ", "\",\n      \""))

        out_file.write("    \"released\": %s,\n" % rel)
        out_file.write("    \"reading_direction\": %s,\n" % rea)

        if chara == "[]":
            out_file.write("    \"characters\": %s,\n" % chara)
        else:
            out_file.write("    \"characters\": [\n      %s\n    ],\n" % chara.replace(", ", "\",\n      \""))

        out_file.write("    \"series\": %s,\n" % ser)

        if par == "[]":
            out_file.write("    \"parody\": %s,\n" % par)
        else:
            out_file.write("    \"parody\": [\n      %s\n    ],\n" % par.replace(", ", "\",\n      \""))

        out_file.write("    \"url\": %s\n" % url)
        out_file.write("  }\n")
        out_file.write("}\n")

    root = os.getcwd()
    gal_path = os.path.join(root)

    print("\nA info.txt file was found in \"%s\"." % gal_path)
    print("    The info.txt was successfully converted.")
    print("    The info.json was saved to \"%s\"." % gal_path)
    print("    The info.txt was not deleted.")
    input("\nPress enter to exit...")
    exit()

else:
    print("\nThis file does not seem to be of the correct format.")
    exit()

input("\nPress enter to exit...")